================
 Link Rendering
================

`test link rendering as a multiadapter`

wicked uses browser:page to take care of setting up the multiadapter +
template binding.  Lazy? yes. Future safe? probably better than hand
rolling.

    >>> from zope.component import getMultiAdapter
    >>> from Products.wicked.interfaces import IAmWicked
    >>> from Products.wicked import browser
    >>> try:
    ...     from zope.publisher.interfaces.browser import IDefaultBrowserLayer
    ... except:
    ...     from zope.publisher.interfaces.browser import IBrowserRequest as IDefaultBrowserLayer
    >>> from Products.wicked.utils import strip as xstrip
    >>> from Products.Five.utilities.marker import mark
    >>> from zope.app.tests.placelesssetup import setUp, tearDown
    >>> from Products.Five import zcml
    >>> import Products.Five
    >>> import Products.testing as testing
    >>> setUp()
    >>> zcml.load_config('meta.zcml', Products.Five)
    >>> zcml.load_config("permissions.zcml", Products.Five)
    >>> zcml.load_config("renderer.zcml", browser)
    >>> zcml.load_config("traversal.zcml", testing)
    >>> from Products.Five.tests.testing import manage_addFiveTraversableFolder
    >>> from Products.wicked.lib.testing.general import dummy
    >>> request = dummy(dict(physicalPathToURL=lambda x, y, z: 'http://url'),
    ...                 iface=IDefaultBrowserLayer, name='request')
    >>> manage_addFiveTraversableFolder(self.folder, 'testfo', title='folder')
    >>> context = self.folder.testfo
    >>> mark(context, IAmWicked)
    >>> from zope.interface import Interface
    >>> renderer = getMultiAdapter((context, request), Interface, 'link_renderer')
    >>> renderer = self.folder.testfo.restrictedTraverse('@@link_renderer')
    >>> link=dict(path='/apath',
    ...           icon='anicon.ico',
    ...           uid='uid')
    >>> renderer.load([link], 'Chunk', section='fieldname')
    >>> print xstrip(renderer())
    <span class="wikilink_resolved" id="fieldname-uid"><a href="http://nohost/apath"><img src="anicon.ico">Chunk</a></span>
    ...

    >>> renderer.load([], 'Chunk 2', section='fieldname2')
    >>> print xstrip(renderer())
    <span class="wikilink_unresolved" id="fieldname2-1"><span class="chunk">Chunk 2</span><a class="wickedadd" href="http://nohost/test_folder_1_/testfo/@@wickedadd?Title=Chunk%202&amp;section=fieldname2">+</a></span>
    ...

    >>> tearDown()
